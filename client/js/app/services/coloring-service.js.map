{"version":3,"sources":["../../../../development/js/app/services/coloring-service.js"],"names":[],"mappings":"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","file":"coloring-service.js","sourcesContent":["angular.module('GoldPulse').service('ColoringService', [function() {\n        //Initialize quartiles\n        var quartilesByDate = [],\n            quartilesByMetric = [];\n\n        //Function to compute Quartiles for returns by date\n        this.setQuartilesByDate = function(stocks) {\n            var dates = stocks[0].dates.map(function(el) {\n                    return el.ymd\n                }),\n                returnsByDate = dates.map(function(date) {\n                    var obj = {\n                        ymd: date,\n                        returns: []\n                    };\n                    for (var i = 0, l = stocks.length; i < l; i++) {\n                        var stock = stocks[i],\n                            change = stock.dates.find(function(el) {\n                                return el.ymd === date;\n                            }).change;\n                        if (change !== 'no data') {\n                            obj.returns.push(parseFloat(change));\n                        }\n                    }\n                    obj.returns.sort(function(a, b) {\n                        return a - b;\n                    });\n                    return obj;\n                });\n            quartilesByDate = returnsByDate.map(function(el) {\n                var obj = {\n                    ymd: el.ymd,\n                    quartiles: []\n                };\n                if (el.returns.length) {\n                    for (var i = 0.25; i < 1; i += 0.25) {\n                        obj.quartiles.push(d3.quantile(el.returns, i));\n                    }\n                }\n                return obj;\n            });\n            return quartilesByDate;\n        };\n        this.setQuartilesByMetric = function(stocks) {\n            var metrics = Object.keys(stocks[0].metrics);\n            quartilesByMetric = metrics.map(function(metric) {\n                var obj = {\n                        metric: metric,\n                        quartiles: []\n                    },\n                    data = [];\n                for (var i = 0, l = stocks.length; i < l; i++) {\n                    var stock = stocks[i],\n                        val = stock.metrics[metric];\n                    if (!isNaN(val)) {\n                        data.push(val);\n                    }\n                }\n                if (data.length) {\n                    data.sort(function(a, b) {\n                        return a - b;\n                    });\n                    for (var i = 0.25; i < 1; i += 0.25) {\n                        obj.quartiles.push(d3.quantile(data, i));\n                    }\n                }\n                return obj;\n            });\n            return quartilesByMetric;\n        };\n\n        //Functions for coloring logic\n        this.colorByDate = function(dates, ymd, stock, mode, selection) {\n            if (mode === \"test\" || selection === 'name' || selection === 'ticker') {\n                var change = stock.dates.find(function(el) {\n                    return el.ymd === ymd;\n                }).change;\n                if (change !== 'no data') {\n                    change = parseFloat(change);\n                    const quartiles = quartilesByDate.find(function(el) {\n                        return el.ymd === ymd;\n                    }).quartiles;\n                    if (change <= quartiles[0]) {\n                        return 'red';\n                    }\n                    else if (change <= quartiles[1]) {\n                        return 'yellow';\n                    }\n                    else if (change <= quartiles[2]) {\n                        return 'blue';\n                    }\n                    else {\n                        return 'green';\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n            else if (dates.indexOf(ymd) === selection) {\n                return 'highlight';\n\n            }\n        };\n        this.colorByMetric = function(metric, stock, mode, selection) {\n            if (selection === metric) {\n                return 'highlight';\n            }\n            else if (mode === 'train' || selection === 'name' || selection === 'ticker') {\n                var val = stock.metrics[metric];\n                if (!isNaN(val)) {\n                    var quartiles = quartilesByMetric.find(function(el) {\n                        return el.metric === metric;\n                    }).quartiles;\n                    if (val <= quartiles[0]) {\n                        return 'red';\n                    }\n                    else if (val <= quartiles[1]) {\n                        return 'yellow';\n                    }\n                    else if (val <= quartiles[2]) {\n                        return 'blue';\n                    }\n                    else {\n                        return 'green';\n                    }\n                    \n                }\n                else{\n                    return null;\n                }\n\n            }\n        };\n\n    }\n\n]);"]}