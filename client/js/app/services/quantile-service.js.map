{"version":3,"sources":["../../../../development/js/app/services/quantile-service.js"],"names":[],"mappings":";;AAAA,QAAQ,MAAR,CAAe,WAAf,EACK,OADL,CACa,iBADb,EACgC,CAAC,YAAW;AACpC,aAAS,WAAT,CAAqB,GAArB,EAA0B,CAA1B,EAA6B;AACzB,YAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;AACvB,kBAAM,IAAI,SAAJ,CAAc,oBAAd,CAAN;AACH;;AAED,aAAK,IAAI,IAAI,CAAR,EAAW,IAAI,IAAI,MAAxB,EAAgC,IAAI,CAApC,EAAuC,GAAvC,EAA4C;AACxC,gBAAI,KAAK,IAAI,CAAJ,CAAT,EAAiB;AACb,uBAAO,IAAI,CAAJ,IAAS,MAAM,IAAI,CAAJ,CAAtB;AAA8B;AAA9B,iBACA,IAAI,MAAM,CAAV,EAAa,OAAO,CAAP;AACb,oBAAI,MAAM,IAAI,IAAI,CAAR,CAAV,EAAsB;AAClB,yBAAK,CAAC,IAAI,IAAI,IAAI,CAAR,CAAL,KAAoB,IAAI,CAAJ,IAAS,IAAI,IAAI,CAAR,CAA7B,CAAL;AACH;AACD,uBAAO,IAAI,CAAX;AACH;AACJ;AACD,eAAO,CAAP;AACH;;AAED,QAAI,eAAe,EAAnB;;AAEA,SAAK,eAAL,GAAuB,UAAS,MAAT,EAAiB;AACpC,YAAM,UAAU,OAAO,IAAP,CAAY,OAAO,CAAP,EAAU,OAAtB,CAAhB;AADoC;AAAA;AAAA;;AAAA;AAEpC,iCAAmB,OAAnB,8HAA4B;AAAA,oBAAnB,MAAmB;;AACxB,oBAAI,OAAO,EAAX;;AADwB;AAAA;AAAA;;AAAA;AAGxB,0CAAkB,MAAlB,mIAA0B;AAAA,4BAAjB,KAAiB;;AACtB,4BAAM,MAAM,MAAM,OAAN,CAAc,MAAd,CAAZ;AACA,4BAAI,CAAC,MAAM,GAAN,CAAL,EAAiB;AACb,iCAAK,IAAL,CAAU,GAAV;AACH;AAEJ;AATuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUxB,oBAAI,KAAK,MAAT,EAAiB;AACb,yBAAK,IAAL,CAAU,UAAC,CAAD,EAAI,CAAJ;AAAA,+BAAU,IAAI,CAAd;AAAA,qBAAV;AACH;AACD,6BAAa,MAAb,IAAuB,IAAvB;AACH;AAhBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBpC,eAAO,YAAP;AACH,KAlBD;;AAoBA,SAAK,gBAAL,GAAwB,UAAS,KAAT,EAAgB,MAAhB,EAAwB;AAC5C,YAAM,OAAO,aAAa,MAAb,CAAb;AACA,eAAO,YAAY,IAAZ,EAAkB,MAAM,OAAN,CAAc,MAAd,CAAlB,CAAP;AACH,KAHD;AAKH,CA9C2B,CADhC","file":"quantile-service.js","sourcesContent":["angular.module(\"GoldPulse\")\n    .service('QuantileService', [function() {\n        function percentRank(arr, v) {\n            if (typeof v !== 'number') {\n                throw new TypeError('v must be a number');\n            }\n\n            for (var i = 0, l = arr.length; i < l; i++) {\n                if (v <= arr[i]) {\n                    while (i < l && v === arr[i]) i++;\n                    if (i === 0) return 0;\n                    if (v !== arr[i - 1]) {\n                        i += (v - arr[i - 1]) / (arr[i] - arr[i - 1]);\n                    }\n                    return i / l;\n                }\n            }\n            return 1;\n        }\n\n        let dataByMetric = {};\n\n        this.setDataByMetric = function(stocks) {\n            const metrics = Object.keys(stocks[0].metrics);\n            for (let metric of metrics) {\n                let data = [];\n\n                for (let stock of stocks) {\n                    const val = stock.metrics[metric];\n                    if (!isNaN(val)) {\n                        data.push(val);\n                    }\n\n                }\n                if (data.length) {\n                    data.sort((a, b) => a - b);\n                }\n                dataByMetric[metric] = data;\n            }\n            return dataByMetric;\n        };\n\n        this.quantileByMetric = function(stock, metric) {\n            const data = dataByMetric[metric];\n            return percentRank(data, stock.metrics[metric]);\n        };\n\n    }]);"]}